<!DOCTYPE html>
<html>

<head>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-124885614-2"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-124885614-2');
</script>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>AWESOM-O //

    </title>

    <link rel="icon" type="image/png" href="/img/favicon.png" />
    <link rel="shortcut icon" type="image/png" href="/img/favicon.png" />
    <meta name="theme-color" content="#ff594f">
    <meta id="meta-desc" name="description" content="View this card on AWESOM-O">
    <meta name="author" content="Feinwaru Software">
    <link rel="alternate" href="/" hreflang="x-default" />

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ"
        crossorigin="anonymous">
    <!-- Bootstrap core CSS -->
    <link href="/css/bootstrap.min.css" rel="stylesheet">
    <!-- Material Design Bootstrap -->
    <link href="/css/mdb.min.css" rel="stylesheet">

    <link href="/css/style.css" rel="stylesheet">

    <style>
        html,
        body,
        header,
        .jarallax {
            height: 100%;
        }

        .jarallax-card {
            height: 400px;
        }

        @media (max-width: 740px) {
            html,
            body,
            header,
            .view {
                height: 400px;
            }
        }

        @media (max-width: 768px) {
            .navbar:not(.top-nav-collapse) {
                background: #ff594f !important;
            }
        }

        @media (min-width: 800px) and (max-width: 850px) {
            .navbar:not(.top-nav-collapse) {
                background: rgba(255, 89, 79, 1) !important;
            }
        }

        .divider {
            height: 3px;
            display: block;
            background-color: rgba(0, 0, 0, .1);
            margin: 1em 0;
            width: 30px
        }

.cardBg {
            -webkit-clip-path: polygon(15% 8%, 88% 8%, 93% 11%, 93% 88%, 88% 91%, 13% 91%, 9% 87%, 9% 11%);
            clip-path: polygon(15% 8%, 88% 8%, 93% 11%, 93% 88%, 88% 91%, 13% 91%, 9% 87%, 9% 11%);
            transform: translateY(30px);
        }

        .cardContainer {
            width: 90%;
            position: absolute;
            z-index: 10;
            transform-style: preserve-3d;
            will-change: transform;
            transform: perspective(500px) rotateX(0deg) rotateY(0deg);
        }

        .cardFrame {
            width: 100%;
            position: absolute;
            z-index: 20;
            transform: translateZ(15px) translateY(-100%);
            cursor: pointer;
        }

        .cardBgNew {
            transform: translateY(13px);
            outline: red dashed;
            -webkit-background-size: cover;
            -moz-background-size: cover;
            -o-background-size: cover;
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center center;
            width: 305px;
            height: 418px;
            z-index: 5;
            position: absolute;
        }

        .cardContainerNew {
            width: 90%;
            position: absolute;
            z-index: 10;
            transform-style: preserve-3d;
            will-change: transform;
            transform: perspective(500px) rotateX(0deg) rotateY(0deg);
        }

        .cardFrameNew {
            width: 100%;
            position: absolute;
            z-index: 20;
            transform: translateZ(15px);
            cursor: pointer;

            width: 305px;
            height: 418px;
            position: absolute;
        }

        .sortbutton {
            cursor: pointer;
        }

        .Gen {
            background-color: #857468;
            color: white;
        }

        .Adv {
            background-color: #4f80ba;
            color: white;
        }

        .Sci {
            background-color: #db571d;
            color: white;
        }

        .Mys {
            background-color: #4b9b38;
            color: white;
        }

        .Fan {
            background-color: #d34f5f;
            color: white;
        }

        .Gen {
            color: #857468;
        }

        .AdvText {
            color: #4f80ba;
        }

        .SciText {
            color: #db571d;
        }

        .MysText {
            color: #4b9b38;
        }

        .FanText {
            color: #d34f5f;
        }

        .dropdown-content li>a,
        .dropdown-content li>span {
            color: #212529;
        }

        @media (max-width: 992px) {
            #filters {
                padding-top: 20px;
            }
        }

        @media (min-width: 2300px) {
            .col-xxl-3 {
                -ms-flex: 0 0 25%;
                flex: 0 0 25%;
                max-width: 25%
            }
        }

        code {
            color: #ccc;
            background-color: #333;
            padding: 5px;
            padding-left: 10px;
            padding-right: 10px;
            border-radius: 5px
        }

         li > span.badge {
            transform: translateY(-2px);
        }

        .preload {
            position: fixed;
            height: 100%;
            width: 100%;
            z-index: 999;
            background-color: #eee;
            
        }
        @media (min-width: 473px) and (max-width: 992px){
            .col-aids-8 {
    -ms-flex: 0 0 66.666667%;
    flex: 0 0 66.666667%;
    max-width: 66.666667%
}
}
        #sticky-stopper {
            margin-right: 0;
        }        
        /* .cardCol {
            outline: red dashed 
        } */
    </style>

    <div class="preload">
        <div class="container h-100 d-flex justify-content-center align-items-center">
            <div class="row pt-5 mt-3">
                <div class="col-md-12 mb-3">
                    <div class="text-center white-text">
                        <ul class="list-unstyled ">
                            <li>
                                <h1 class="display-4 mt-md-5 mt-lg-0 mb-5 font-weight-bold dark-grey-text">
                                    <strong>
                                    </strong>
                                </h1>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

</head>

<body class="">

    <%- include partials/navbar.ejs %>

    <main>

        <div class="container pb-5 pt-5">

            <div class="row pt-5">
                <!-- Sidebar -->
                <div class="col-lg-4 col-12 col-aids-8 pt-2">
                    <div id="rawrxd" class="cardCol" style="height: 0px;">
                        <div id="cardContainerAhhh" class="cardContainer sticky">
                        </div>
                    </div>
                </div>

                <!-- /.Sidebar -->
                <div class="col-lg-8">
                    <div class="row">
                        <div id="card-info" class="col-12 pb-2">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="sticky-stopper" class="row pb-5"></div>
        <!-- Central Modal Small -->
        <div class="ThemeColour">
            <div class="container">
                <div class="row py-4 d-flex align-items-center">

                    <div class="col-12 text-center mb-4 mb-md-0">
                        <h6 class="mb-0 white-text">
                            <a style="color: inherit; text-decoration: inherit;" href="/terms#redlynx">
                                AWESOM-O is not affiliated with South Park or Ubisoft
                            </a>
                        </h6>
                    </div>

                </div>

            </div>
        </div>
    </main>
    <%- include partials/footer.ejs %>

    <!--/.Footer-->


    <!-- SCRIPTS -->

    <!-- JQuery -->
    <script type="text/javascript" src="/js/jquery-3.2.1.min.js"></script>

    <!-- Bootstrap tooltips -->
    <script type="text/javascript" src="/js/popper.min.js"></script>

    <!-- Bootstrap core JavaScript -->
    <script type="text/javascript" src="/js/bootstrap.min.js"></script>

    <!-- MDB core JavaScript -->
    <script type="text/javascript" src="/js/mdb.min.js"></script>


    <script>
        //Animation init
        new WOW().init();

        //change size responsively
        const changeCardSize = function () {
            $(".cardCol").css("height", $(".cardFrame").height());
        };

        //shift card art upwards when on small screens
        const mobileArtCompensator = function () {
            if ($(window).width() <= 475) {
                const width = $(window).width();

                const compensate = 22 + ((475 - width) / 20)

                $(".cardBg").css("transform", "translateY(" + compensate + "px)");
            };
        };

        // Material Select Initialization
        $(document).ready(function () {
            function camelPad(str) {
                return str
                    // Look for long acronyms and filter out the last letter
                    .replace(/([A-Z]+)([A-Z][a-z])/g, ' $1 $2')
                    // Look for lower-case letters followed by upper-case letters
                    .replace(/([a-z\d])([A-Z])/g, '$1 $2')
                    // Look for lower-case letters followed by numbers
                    .replace(/([a-zA-Z])(\d)/g, '$1 $2')
                    .replace(/^./, function (str) {
                        return str.toUpperCase();
                    })
                    // Remove any white space left around the word
                    .trim();
            }

            //get them cards
            const getCards = new XMLHttpRequest();
            getCards.open("GET",
                `https://gist.githubusercontent.com/MattheousDT/3f45f903f05c1f56cdf7bd528d77dcd1/raw/8437377e475f1f13081d78e3b50d3dbc7b11fbbc/cards_15aug.json`,
                false);

            getCards.send();
            const cardsYay = JSON.parse(getCards.response);

            // dragons nice code teehee

            // 5, 10, 10, 15, 15, 15

            const pathName = window.location.pathname;
            const currentCardName = pathName.slice(pathName.lastIndexOf("/") + 1);

            const currentCard = cardsYay.find(e => {
                return e.Image === currentCardName;
            });
            if (currentCard === undefined) {
                alert("card not found");
            }

            console.log(currentCard);

            // note, the base stats are upgrade 1
            const getUpgradeStats = upgrade => {

                if (upgrade < 1 || upgrade > 70) {

                    alert("oooof");
                    return {};
                }

                const stats = {};


                for (let k in currentCard) {

                    if (k.startsWith("Power") === true && currentCard[k] !== null && currentCard[k] !==
                        "") {

                        stats[k] = currentCard[k];
                    }

                    // exceptions cos redlynx gay
                    if (k === "ChargedPowerRadius") {

                        stats["PowerRange"] = currentCard[k];
                    }
                }

                stats.Health = parseInt(currentCard.Health);
                if (isNaN(stats.Health)) {

                    alert("of");
                    return {};
                }

                stats.Damage = parseInt(currentCard.Damage);
                if (isNaN(stats.Damage)) {

                    alert("oof");
                    return {};
                }

                if (currentCard.Type === "Spell") {

                    if (currentCard.Image === "SpellCockMagicCard") {

                        stats["PowerTarget"] = 1;
                    }

                    return stats;
                }

                for (let i = 0; i < upgrade - 1; i++) {

                    if (currentCard.TechTree2.Slots[i].property === "MaxHealth") {

                        stats.Health += currentCard.TechTree2.Slots[i].value;
                    }
                    if (currentCard.TechTree2.Slots[i].property === "Damage") {

                        stats.Damage += currentCard.TechTree2.Slots[i].value;
                    }
                    if (currentCard.TechTree2.Slots[i].property.indexOf("Abs") !== -1) {

                        const propertyAbs = currentCard.TechTree2.Slots[i].property;
                        const property = propertyAbs.slice(0, propertyAbs.length - 3);

                        if (stats[property] === undefined) {

                            alert("ooof");
                            return {};

                        } else {

                            stats[property] += currentCard.TechTree2.Slots[i].value;
                        }
                    }
                }

                let levelModifier = 0;
                if (upgrade > 5) {
                    levelModifier++;
                }
                if (upgrade > 15) {
                    levelModifier++;
                }
                if (upgrade > 25) {
                    levelModifier++;
                }
                if (upgrade > 40) {
                    levelModifier++;
                }
                if (upgrade > 55) {
                    levelModifier++;
                }

                for (let i = 0; i < levelModifier; i++) {

                    for (let j = 0; j < currentCard.TechTree2.Evolve[i].Slots.length; j++) {

                        if (currentCard.TechTree2.Evolve[i].Slots[j].property === "MaxHealth") {

                            stats.Health += currentCard.TechTree2.Evolve[i].Slots[j].value;
                        }
                        if (currentCard.TechTree2.Evolve[i].Slots[j].property === "Damage") {

                            stats.Damage += currentCard.TechTree2.Evolve[i].Slots[j].value;
                        }
                        if (currentCard.TechTree2.Evolve[i].Slots[j].property.indexOf("Abs") !== -1) {

                            const propertyAbs = currentCard.TechTree2.Evolve[i].Slots[j].property;
                            const property = propertyAbs.slice(0, propertyAbs.length - 3);

                            if (stats[property] === undefined) {

                                alert("ooooof");
                                return {};

                            } else {

                                stats[property] += currentCard.TechTree2.Evolve[i].Slots[j].value;
                            }
                        }
                    }
                }

                return stats;
            }

            const getLevelStats = level => {

                if (level < 1 || level > 7) {

                    alert("oooooof");
                    return {};
                }

                if (level === 1) {

                    return getUpgradeStats(1);
                }

                let upgradeModifier = 0;
                if (level === 2) {
                    upgradeModifier += 5;
                }
                if (level === 3) {
                    upgradeModifier += 15;
                }
                if (level === 4) {
                    upgradeModifier += 25;
                }
                if (level === 5) {
                    upgradeModifier += 40;
                }
                if (level === 6) {
                    upgradeModifier += 55;
                }
                if (level === 7) {
                    upgradeModifier += 70;
                }

                const stats = getUpgradeStats(upgradeModifier);

                if (currentCard.Type === "Spell") {

                    for (let i = 0; i < level - 1; i++) {

                        for (let j = 0; j < currentCard.TechTree2.Evolve[i].Slots.length; j++) {

                            if (currentCard.TechTree2.Evolve[i].Slots[j].property === "MaxHealth") {

                                stats.Health += currentCard.TechTree2.Evolve[i].Slots[j].value;
                            }
                            if (currentCard.TechTree2.Evolve[i].Slots[j].property === "Damage") {

                                stats.Damage += currentCard.TechTree2.Evolve[i].Slots[j].value;
                            }
                            if (currentCard.TechTree2.Evolve[i].Slots[j].property.indexOf("Abs") !== -1) {

                                const propertyAbs = currentCard.TechTree2.Evolve[i].Slots[j].property;
                                const property = propertyAbs.slice(0, propertyAbs.length - 3);

                                if (stats[property] === undefined) {

                                    alert("ooooof");
                                    return {};

                                } else {

                                    stats[property] += currentCard.TechTree2.Evolve[i].Slots[j].value;
                                }
                            }
                        }
                    }
                } else {

                    const currentLevel = currentCard.TechTree2.Evolve[level - 2]
                    for (let i = 0; i < currentLevel.Slots.length; i++) {

                        if (currentLevel.Slots[i].property === "MaxHealth") {

                            stats.Health += currentLevel.Slots[i].value;
                        }
                        if (currentLevel.Slots[i].property === "Damage") {

                            stats.Damage += currentLevel.Slots[i].value;
                        }
                        if (currentLevel.Slots[i].property.indexOf("Abs") !== -1) {

                            const propertyAbs = currentLevel.Slots[i].property;
                            const property = propertyAbs.slice(0, propertyAbs.length - 3);

                            if (stats[property] === undefined || property === "PowerTarget") {

                                if (property === "PowerTarget") {

                                    stats[property] = level;
                                } else {

                                    alert("ooooooof");
                                    return {};
                                }
                            } else {

                                stats[property] += currentLevel.Slots[i].value;
                            }
                        }
                    }
                }

                return stats;
            }

            function causeDiameterEqualsRadiusRight(yeet) {
                return yeet / 2
            }

            function round2dp(lol) {
                return Math.round(lol * 100) / 100
            }
            //console.log(getLevelStats(2));

            //

            //const newStats = getLevelStats(7);
            //const healthChange = newStats.Health === undefined ? 0 : newStats.Health - currentCard.Health;



            //sorting

            //var urlParams = window.location.href.substring(window.location.href.indexOf("?hl=") + 6);

            //const validThemes = ["all", "neutral", "adventure", "sci-fi", "mystical",
            //    "fantasy"
            //];
            //if (validThemes.includes(themeCookie) === true) {
            //    var theme = themeCookie;
            //} else {
            //    var theme = false;
            //}

            //const url = window.location.pathname;
            //const currentCard = url.substring(22);

            for (let i = 0; i < cardsYay.length; i++) {
                if (cardsYay[i].Image === currentCardName) {
                    //console.log(cardsYay[i])
                    if (cardsYay[i].Name instanceof Array) {
                        var cardName = cardsYay[i].Name[0];
                    } else {
                        var cardName = cardsYay[i].Name;
                    };

                    if (cardsYay[i].Rarity === 0) {
                        var rarity = "Common";
                    } else if (cardsYay[i].Rarity === 1) {
                        var rarity = "Rare";
                    } else if (cardsYay[i].Rarity === 2) {
                        var rarity = "Epic";
                    } else if (cardsYay[i].Rarity === 3) {
                        var rarity = "Legendary";
                    }


                    $(".cardContainer").html(


                        `
                                <img class="img-fluid cardBg" src="/img/backgrounds/${cardsYay[i].Image}.jpg">
                                <div class="cardFrame">
                                    <img id="rawrxd2" class="img-fluid" src="/img/frames/frame_${cardsYay[i].Image}.png">
                                </div>
                                `


                        /*
                        `
                            <div class="cardContainer style="position: relative;">
                                <div class="cardFrame" style="background: url('/img/pd-assets/art/templates/frame-outline.png');">
                                </div>
                                <div class="cardBg" style="background-image: url('/cards/backgrounds/${cardsYay[i].Image}.jpg')">
                                </div>
                            </div>
                       `
                        */
                    )

                    $("#card-info").html(
                        `
                                    <div class="" style="width: 100%">
                                                <h1 class="font-weight-bold mb-2 mt-2">
                                                    ${cardName}
                                                    <sup>
                                                        <a id="share-card" style="font-size: 16pt" data-toggle="tooltip" data-placement="top" title="Copy link to card">
                                                            <i class="fa fa-share-square" aria-hidden="true"></i>
                                                        </a>
                                                    </sup>
                                                </h1>
                                                <h4 class="font-weight-bold dark-grey-text">${rarity} | ${cardsYay[i].Type === "Spell" ? "Spell" : cardsYay[i].CharacterType}
                                                    
                                                </h4>
                                                <h4 class="font-weight-bold dark-grey-text">
                                                    <span class="light-blue-text">
                                                        <i class="fa fa-bolt" aria-hidden="true"></i> ${cardsYay[i].ManaCost}
                                                    </span> <span id="health-damage-stats">| <span class="red-text">
                                                        <i class="fa fa-heart" aria-hidden="true"></i> <span id="health">${cardsYay[i].Health}</span> <sup><span class="badge red" id="health-increase-amount"></span></sup>
                                                    </span> | <span class="orange-text">
                                                        <i class="fa fa-shield-alt" aria-hidden="true"></i> <span id="damage">${cardsYay[i].Damage}</span> <sup><span class="badge orange" id="damage-increase-amount"></span></sup>
                                                    </span></span>
                                                </h4>
                                                <h5 id="desc" class="font-italic">${cardsYay[i].Description}</h5>
                                            </div>
                                            
                                            <div class="pt-4">
                                        <h5 class="font-weight-bold ThemeText">Select an upgrade level</h5>
                                        <div class="col-6 pl-0">
                                        <select id="level-select" class="mdb-select">
                                        <option>Upgrade 1 / 70</option>
                                        <option>Upgrade 2 / 70</option>
                                        <option>Upgrade 3 / 70</option>
                                        <option>Upgrade 4 / 70</option>
                                        <option>Upgrade 5 / 70</option>
                                        <option>Level 2</option>
                                        <option>Upgrade 6 / 70</option>
                                        <option>Upgrade 7 / 70</option>
                                        <option>Upgrade 8 / 70</option>
                                        <option>Upgrade 9 / 70</option>
                                        <option>Upgrade 10 / 70</option>
                                        <option>Upgrade 11 / 70</option>
                                        <option>Upgrade 12 / 70</option>
                                        <option>Upgrade 13 / 70</option>
                                        <option>Upgrade 14 / 70</option>
                                        <option>Upgrade 15 / 70</option>
                                        <option>Level 3</option>
                                        <option>Upgrade 16 / 70</option>
                                        <option>Upgrade 17 / 70</option>
                                        <option>Upgrade 18 / 70</option>
                                        <option>Upgrade 19 / 70</option>
                                        <option>Upgrade 20 / 70</option>
                                        <option>Upgrade 21 / 70</option>
                                        <option>Upgrade 22 / 70</option>
                                        <option>Upgrade 23 / 70</option>
                                        <option>Upgrade 24 / 70</option>
                                        <option>Upgrade 25 / 70</option>
                                        <option>Level 4</option>
                                        <option>Upgrade 26 / 70</option>
                                        <option>Upgrade 27 / 70</option>
                                        <option>Upgrade 28 / 70</option>
                                        <option>Upgrade 29 / 70</option>
                                        <option>Upgrade 30 / 70</option>
                                        <option>Upgrade 31 / 70</option>
                                        <option>Upgrade 32 / 70</option>
                                        <option>Upgrade 33 / 70</option>
                                        <option>Upgrade 34 / 70</option>
                                        <option>Upgrade 35 / 70</option>
                                        <option>Upgrade 36 / 70</option>
                                        <option>Upgrade 37 / 70</option>
                                        <option>Upgrade 38 / 70</option>
                                        <option>Upgrade 39 / 70</option>
                                        <option>Upgrade 40 / 70</option>
                                        <option>Level 5</option>
                                        <option>Upgrade 41 / 70</option>
                                        <option>Upgrade 42 / 70</option>
                                        <option>Upgrade 43 / 70</option>
                                        <option>Upgrade 44 / 70</option>
                                        <option>Upgrade 45 / 70</option>
                                        <option>Upgrade 46 / 70</option>
                                        <option>Upgrade 47 / 70</option>
                                        <option>Upgrade 48 / 70</option>
                                        <option>Upgrade 49 / 70</option>
                                        <option>Upgrade 50 / 70</option>
                                        <option>Upgrade 51 / 70</option>
                                        <option>Upgrade 52 / 70</option>
                                        <option>Upgrade 53 / 70</option>
                                        <option>Upgrade 54 / 70</option>
                                        <option>Upgrade 55 / 70</option>
                                        <option>Level 6</option>
                                        <option>Upgrade 56 / 70</option>
                                        <option>Upgrade 57 / 70</option>
                                        <option>Upgrade 58 / 70</option>
                                        <option>Upgrade 59 / 70</option>
                                        <option>Upgrade 60 / 70</option>
                                        <option>Upgrade 61 / 70</option>
                                        <option>Upgrade 62 / 70</option>
                                        <option>Upgrade 63 / 70</option>
                                        <option>Upgrade 64 / 70</option>
                                        <option>Upgrade 65 / 70</option>
                                        <option>Upgrade 66 / 70</option>
                                        <option>Upgrade 67 / 70</option>
                                        <option>Upgrade 68 / 70</option>
                                        <option>Upgrade 69 / 70</option>
                                        <option>Upgrade 70 / 70</option>
                                        <option>Level 7</option>
                                    </select>
                                    </div>
                                    <h5 class="font-weight-bold ThemeText">AWESOM-O Commands</h5>
                                    <ul id="awesomo-commands" class="list-unstyled">
                                        <code>-card ${cardsYay[i].Name.toLowerCase()}</code>
                                    </ul>
                                    <h5 class="font-weight-bold ThemeText">General Information</h5>
                                    <ul class="list-unstyled align">
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Cast Area:</span>
                                            <span >${camelPad(cardsYay[i].CastArea)}</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Max Velocity:</span>
                                            <span >${cardsYay[i].MaxVelocity}</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Time To Reach Max Velocity:</span>
                                            <span>${cardsYay[i].TimeToReachMaxVelocity} seconds</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Agro Range Multiplier:</span>
                                            <span>${cardsYay[i].AgroRangeMultiplier}x</span>
                                        </li>
                                    </ul>
                                    <h5 class="font-weight-bold ThemeText">Power Information</h5>
                                    <ul class="list-unstyled">
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Attack Boost:</span>
                                            <span id="PowerAttackBoost" class="power-stat-value">${cardsYay[i].PowerAttackBoost}</span> <span class="badge ThemeColour" id="PowerAttackBoost-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Attack Decrease:</span>
                                            <span id="PowerAttackDecrease" class="power-stat-value">${cardsYay[i].PowerAttackDecrease}</span> <span class="badge ThemeColour" id="PowerAttackDecrease-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Power Damage:</span>
                                            <span id="PowerDamage" class="power-stat-value">${cardsYay[i].PowerDamage}</span> <span class="badge ThemeColour" id="PowerDamage-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Duration:</span>
                                            <span id="PowerDuration" class="power-stat-value">${cardsYay[i].PowerDuration}</span> <span class="badge ThemeColour" id="PowerDuration-increase-amount"></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Heal:</span>
                                            <span id="PowerHeal" class="power-stat-value">${cardsYay[i].PowerHeal}</span> <span class="badge ThemeColour" id="PowerHeal-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Hero Damage:</span>
                                            <span class="power-stat-value">${cardsYay[i].PowerHeroDamage}</span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Hero Heal:</span>
                                            <span class="power-stat-value">${cardsYay[i].PowerHeroHeal}</span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Poison:</span>
                                            <span class="power-stat-value">${cardsYay[i].PowerHeroPoison}</span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Max HP Gain:</span>
                                            <span id="PowerMaxHPGain" class="power-stat-value">${cardsYay[i].PowerMaxHPGain}</span> <span class="badge ThemeColour" id="PowerMaxHPGain-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Max HP Loss:</span>
                                            <span id="PowerMaxHPLoss" class="power-stat-value">${cardsYay[i].PowerMaxHPLoss}</span> <span class="badge ThemeColour" id="PowerMaxHPLoss-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Poision Amount:</span>
                                            <span id="PowerPoisonAmount" class="power-stat-value">${cardsYay[i].PowerPoisonAmount}</span> <span class="badge ThemeColour" id="PowerPoisonAmount-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Summon Level:</span>
                                            <span id="PowerSummonLevel" class="power-stat-value">${cardsYay[i].PowerSummonLevel}</span> <span class="badge ThemeColour" id="PowerSummonLevel-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Target Amount:</span>
                                            <span id="PowerTarget" class="power-stat-value">${cardsYay[i].Image === "SpellCockMagicCard" ? 1 : 0}</span> <span class="badge ThemeColour" id="PowerTarget-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">${cardsYay[i].Id === 209 || cardsYay[i].Id === 40 || cardsYay[i].Id === 1286 || cardsYay[i].Id === 1273 ? "Power Radius:" : "Charged Power Radius:"}</span>
                                            <span id="PowerRange" class="power-stat-value">${cardsYay[i].ChargedPowerRadius / 2}</span> <span class="badge ThemeColour" id="PowerRange-increase-amount" style""></span>
                                        </li>
                                        <li class="power-stat">
                                            <span class="font-weight-bold dark-grey-text">Charged Power Regen:</span>
                                            <span class="power-stat-value">${Math.round(cardsYay[i].ChargedPowerRegen * 100) / 100}</span> 
                                        </li>
                                    </ul>    
                                <h5 id="attack" class="font-weight-bold ThemeText">Can Attack?</h5>
                                    <ul id="attack-info" class="list-unstyled align">
                                    </ul>
                                    <h5 id="aoe" class="font-weight-bold ThemeText">AOE Attacks?</h5>
                                    <ul id="aoe-info" class="list-unstyled">

                                    </ul>
                                    <h5 class="font-weight-bold ThemeText">Requirements</h5>
                                    <ul class="list-unstyled">
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Minimum Episode Completed:</span>
                                            <span id="modal-minimum-pvp-rank">${cardsYay[i].Requirements.MinEpisodeCompleted}</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Minimum PVP Rank Required:</span>
                                            <span id="modal-minimum-pvp-rank">${cardsYay[i].Requirements.MinPVPRank}</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Minimum Player Level:</span>
                                            <span id="modal-minimum-pvp-rank">${cardsYay[i].Requirements.MinPlayerLevel}</span>
                                        </li>
                                    </ul>
                                    </div>
                                    <div id="table">
                                    </div>
                                `
                    );

                    if (currentCard.Type === "Spell") {
                        $("#health-damage-stats").hide();
                        const upgradeselect = $("#level-select option:contains('Upgrade')").hide();
                    }
                    $('.mdb-select').material_select();

                    //replace redlynx's cunty shit

                    $("#desc").text(function () {
                        return $(this).text().replace(
                            "{PowerDurationMin}-{PowerDurationMax}", (cardsYay[i].PowerDuration -
                                1) + "-" + (cardsYay[i].PowerDuration + 1) +
                            " seconds");
                    });
                    $("#desc").text(function () {
                        return $(this).text().replace("{PowerHeroPoison}", cardsYay[i].PowerPoisonAmount);
                    });
                    $("#desc").text(function () {
                        if (cardsYay[i].PowerHeroDamage === null) {
                            return $(this).text().replace("{PowerHeroDamage}", cardsYay[i].PowerDamage);
                        } else {
                            return $(this).text().replace("{PowerHeroDamage}", cardsYay[i].PowerHeroDamage);
                        }
                    });
                    $("#desc").text(function () {
                        return $(this).text().replace("{PowerDuration}", cardsYay[i].PowerDuration +
                            " seconds");
                    });
                    $("#desc").text(function () {
                        return $(this).text().replace("{PowerHeal}", cardsYay[i].PowerHeal);
                    });
                    $("#desc").text(function () {
                        return $(this).text().replace("{PowerAttackBoost}", cardsYay[i].PowerAttackBoost);
                    });
                    $("#desc").text(function () {
                        return $(this).text().replace("{PowerTargetAmount}", "1");
                    });
                    //Hide unnessasary power stats
                    $(".power-stat-value:contains('null')").parent().hide()
                    //$(".power-stat-value:contains('0')").parent().hide()
                    $(".power-stat-value").filter(function () {
                        return $(this).text() === "0";
                    }).parent().hide();
                    //change null to n/a cause it looks better innit
                    $.each($('span'), function (i, e) {
                        $(e).html($(e).html().replace(/null/g, 'N/A'));
                    });

                    const upgrades = [];


                    for (let h = 0; h < cardsYay[i].TechTree2.Slots.length; h++) {
                        //console.log(cardsYay[i].TechTree2.Slots[h])
                        if (cardsYay[i].TechTree2.Slots[h].property == "MaxHealth") {
                            //console.log(cardsYay[i].TechTree2.Slots[h])

                            //console.log(h)
                            let urma = {
                                "upgrade": h,
                                "attr": "Health",
                                "value": parseFloat(cardsYay[i].Health) + (parseFloat(cardsYay[
                                    i].TechTree2.Slots[h].value))
                            };
                            upgrades.push(urma)
                        }
                    }

                    //console.log(upgrades)
                    $("#level-select").change(function () {
                        const selected = $("#level-select option:selected").index();

                        let stats;

                        let level = 1;
                        if (selected === 5) {
                            level = 2;
                        }
                        if (selected === 16) {
                            level = 3;
                        }
                        if (selected === 27) {
                            level = 4;
                        }
                        if (selected === 43) {
                            level = 5;
                        }
                        if (selected === 59) {
                            level = 6;
                        }
                        if (selected === 75) {
                            level = 7;
                        }

                        //lert(selected);

                        if (level !== 1) {

                            stats = getLevelStats(level);

                        } else {

                            let upgrade = selected + 1;
                            if (selected > 5) {
                                upgrade -= 1;
                            }
                            if (selected > 16) {
                                upgrade -= 1;
                            }
                            if (selected > 27) {
                                upgrade -= 1;
                            }
                            if (selected > 43) {
                                upgrade -= 1;
                            }
                            if (selected > 59) {
                                upgrade -= 1;
                            }
                            if (selected > 75) {
                                upgrade -= 1;
                            }

                            //alert(upgrade);

                            stats = getUpgradeStats(upgrade);
                        }

                        console.log(stats);

                        healthSpan.innerText = stats.Health;
                        damageSpan.innerText = stats.Damage;

                        const healthIncrease = stats.Health === undefined ? 0 : stats.Health -
                            currentCard.Health;
                        const damageIncrease = stats.Damage === undefined ? 0 : stats.Damage -
                            currentCard.Damage;

                        if (healthIncrease !== 0) {

                            healthIncreaseSpan.innerText = "+" + healthIncrease;
                        } else {

                            healthIncreaseSpan.innerText = "";
                        }

                        if (damageIncrease !== 0) {

                            damageIncreaseSpan.innerText = "+" + damageIncrease;
                        } else {

                            damageIncreaseSpan.innerText = "";
                        }

                        //

                        for (let k in stats) {

                            if (k === "Health" || k === "Damage") {

                                continue;
                            }

                            const kSpan = document.getElementById(k);

                            // exceptions cos redlynx gay
                            if (k === "PowerRange") {

                                kSpan.innerText = Math.round((stats[k] - currentCard[
                                    "ChargedPowerRadius"] / 2) * 100) / 100;
                            } else {

                                kSpan.innerText = stats[k];
                            }

                            for (let k2 in currentCard) {

                                if (k2.indexOf("Power") !== -1 && currentCard[k2] !== null &&
                                    currentCard[k2] !== "") {

                                    if (k === k2) {

                                        const kIncreaseSpan = document.getElementById(
                                            `${k}-increase-amount`);

                                        const statIncrease = stats[k] - currentCard[k2];

                                        if (statIncrease !== 0) {

                                            kIncreaseSpan.innerText = "+" + Math.round(statIncrease *
                                                100) / 100;
                                        } else {

                                            kIncreaseSpan.innerText = "";
                                        }
                                    }
                                }

                                // exceptions cos redlynx gay
                                if (k2 === "ChargedPowerRadius") {

                                    if (k === "PowerRange") {

                                        const kIncreaseSpan = document.getElementById(
                                            `${k}-increase-amount`);

                                        const statIncrease = stats[k] - currentCard[
                                            "ChargedPowerRadius"];

                                        if (statIncrease !== 0) {

                                            kIncreaseSpan.innerText = "+" + Math.round(statIncrease *
                                                100) / 100;
                                        } else {

                                            kIncreaseSpan.innerText = "";
                                        }
                                    }
                                }
                            }

                            if (k === "PowerTarget") {

                                const kIncreaseSpan = document.getElementById(
                                    `${k}-increase-amount`);

                                const statIncrease = stats[k] - 1;

                                if (statIncrease !== 0) {

                                    kIncreaseSpan.innerText = "+" + Math.round(statIncrease *
                                        100) / 100;
                                } else {

                                    kIncreaseSpan.innerText = "";
                                }
                            }
                        }
                    });

                    /* $("#tags").html("");

                    for (let t = 0; t < cardsYay[i].tags.length; t++) {
                        $("#tags").append(
                            ` <span class="badge badge-pill ThemeColour">${cardsYay[i].tags[t]}</span> `
                        );
                    };
                    */
                    $("#collapse1").collapse();
                    $(".ThemeText").addClass(cardsYay[i].Theme + "Text");
                    $(".ThemeColour").addClass(cardsYay[i].Theme);

                    //Attack Information
                    if (cardsYay[i].CanAttack === false) {
                        $("#attack").html(
                            `Can Attack? <span><i class="red-text fa fa-close "><i></span>`);
                    } else {
                        $("#attack").html(
                            `Can Attack? <span class="green-text"><i class="fa fa-check "></span>`
                        );
                        $("#attack-info").html(
                            `
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Attack Range:</span>
                                            <span>${cardsYay[i].AttackRange / 2}</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Pre-Attack Delay:</span>
                                            <span>${cardsYay[i].PreAttackDelay}</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Knockback:</span>
                                            <span>${Math.round(cardsYay[i].KnockbackImpulse)} at ${cardsYay[i].KnockbackAngleDeg}°</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">Time In Between Attacks:</span>
                                            <span>${cardsYay[i].TimeInBetweenAttacks}</span>
                                        </li>
                                    `
                        )
                    };

                    //AOE Attack
                    if (cardsYay[i].AOEAttackType === "No" || cardsYay[i].AOEAttackType ===
                        undefined) {
                        $("#aoe").html(
                            `AOE Attacks? <span><i class="red-text fa fa-close "><i></span>`);
                    } else {
                        $("#aoe").html(
                            `AOE Attacks? <span class="green-text">${camelPad(cardsYay[i].AOEAttackType)}</span>`
                        );
                        $("#aoe-info").html(
                            `
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">AOE Damage Percentage:</span>
                                            <span>${cardsYay[i].AOEDamagePercentage}%</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">AOE Knockback Percentage:</span>
                                            <span>${cardsYay[i].AOEKnockbackPercentage}%</span>
                                        </li>
                                        <li>
                                            <span class="font-weight-bold dark-grey-text">AOE Radius:</span>
                                            <span>${cardsYay[i].AOERadius / 2}</span>
                                        </li>
                                    `
                        )
                    };
                }

                if (cardsYay[i].name instanceof Array) {
                    for (let c = 0; c < cardsYay[i].name.length; c++) {
                        $("#awesomo-commands").append(
                            `<li class="mt-2">
                                            <span class="font-weight-bold dark-grey-text"><code>-card ${cardsYay[i].name[c].toLowerCase()}</code></span>
                                        </li>`
                        );
                    }
                };

            }; //END OF FOR LOOP
            if (currentCard.Type === "Spell") {
                $(".filtrable:contains('Upgrade')").hide();
                $(".select-dropdown").attr("value", "Level 1")
                $(".filtrable:contains('Upgrade 1 / 70')").show();
                $(".filtrable:contains('Upgrade 1 / 70')").text("Level 1")
            }
            //            
            const cardFixInterval = setInterval(() => {

                changeCardSize();
            }, 20);

            setTimeout(() => {

                clearInterval(cardFixInterval);
            }, 200);
            //


            function stickyFuckOffLmao(x) {
                if (x.matches) { // If media query matches
                    $("#cardContainerAhhh").removeClass("sticky")
                } else {
                    $("#cardContainerAhhh").addClass("sticky")
                }
            }

            let x = window.matchMedia("(max-width: 991.98px)")
            stickyFuckOffLmao(x) // Call listener function at run time
            x.addListener(stickyFuckOffLmao) // Attach listener function on state changes


            const healthSpan = document.getElementById("health");
            const damageSpan = document.getElementById("damage");

            const healthIncreaseSpan = document.getElementById("health-increase-amount");
            const damageIncreaseSpan = document.getElementById("damage-increase-amount");

            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            });

            /*
            function share() {

                if (!("share" in navigator)) {
                    alert("share not supported");
                    copyClipboard();
                    return;
                }

                navigator.share({
                        title: "AWESOM-O // " + currentCard.Name,
                        text: "See info about" + currentCard.Name + "with AWESOM-O",
                        url: window.location.href
                    })
                    .then(() => console.log('Successful share'))
                    .catch(error => console.log('Error sharing:', error));
            }
            */

            $("#share-card").click(function () {
                var dummy = document.createElement('input'),
                    text = window.location.href;

                document.body.appendChild(dummy);
                dummy.value = text;
                dummy.select();
                document.execCommand('copy');
                document.body.removeChild(dummy);
            });

            $("title").text("AWESOM-O // " + currentCard.Name)


            //mobileArtCompensator();


            //update the card size quickly on page load
            setInterval(function () {
                //changeCardSize();

            }, 100)


        });

        window.onload = () => {
            $(".preload").fadeOut(500);
            $(function () {
                $(".sticky").sticky({
                    topSpacing: 90,
                    zIndex: 2,
                    stopper: "#sticky-stopper"
                });
            });
        }

        //shit to do when people try to resize to see if i've forgot to do stuff but i havent because im a world class web dev
        $(window).resize(function () {
            
            changeCardSize();
            //mobileArtCompensator();
        })
    </script>

</body>

</html>